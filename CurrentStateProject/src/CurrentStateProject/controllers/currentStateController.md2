package CurrentStateProject.controllers

main {
	appVersion "1.0"
	modelVersion "1.0"
	workflowManager WorkflowBackendConnection
	defaultConnection CitizenAppRemoteConnection
}
remoteConnection WorkflowBackendConnection{
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection CitizenAppRemoteConnection {
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection AdministrativeAppRemoteConnection{
	uri "http://...."
	user "adminapp"
	password "Qwertz123"
	key "5678"
}

contentProvider Complaint ComplaintProvider {
	providerType CitizenAppRemoteConnection
}

contentProvider Address AddressProvider {
	providerType CitizenAppRemoteConnection
}

WorkflowElement LocationDetection{
	defaultProcessChain LocationProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
		map LocationDetectionView.AddressData.streetLbl to :AddressProvider.myStreet
		map LocationDetectionView.AddressData.streetNoLbl to :AddressProvider.myStreetNo
		map LocationDetectionView.AddressData.cityLbl to :AddressProvider.myCity
		map LocationDetectionView.AddressData.countryLbl to :AddressProvider.myCountry
		map LocationDetectionView.AddressData.latitudeValueLbl to :AddressProvider.myLatitude
		map LocationDetectionView.AddressData.longitudeValueLbl to :AddressProvider.myLongitude
		map LocationVerifyView.AddressView.streetLbl2 to :AddressProvider.myStreet
		map LocationVerifyView.AddressView.streetNoLbl2 to :AddressProvider.myStreetNo
		map LocationVerifyView.AddressView.cityLbl2 to :AddressProvider.myCity
		map LocationVerifyView.AddressView.countryLbl2 to :AddressProvider.myCountry
		map LocationVerifyView.AddressView.latitudeLbl2 to :AddressProvider.myLatitude
		map LocationVerifyView.AddressView.longitudeLbl2 to :AddressProvider.myLongitude
	}
	
	
	 
	action CustomAction next{
		
		bind action FireEvent(LocationEvent) on LocationVerifyView.Buttons.Next2.onClick
		bind action FireEvent(WithoutPhotoEvent) on LocationVerifyView.Buttons.SkipUpload.onClick
		 
	}
	
	
	action CustomAction GoOn{
		if (LocationDetectionView.AddressData.cityLbl equals ""){
		}
		else{
			call FireEvent(LocationEvent)
		}
	}
	
	action CustomAction saveComplaint{
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation (save :ComplaintProvider)
	}
	
	processChain LocationProcessChain{
		step LocationDetection: 
			view LocationDetectionView
			proceed {on LocationDetectionView.Navbar.Next.onClick
				given {(LocationDetectionView.AddressData.cityLbl equals "MÃ¼nster")} 
				then saveComplaint}

		step LocationVerify:
			view LocationVerifyView
			reverse on LocationVerifyView.Buttons.Previous.onClick
	}
}


WorkflowElement Mediacapturing {
	defaultProcessChain MediaProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
		
	}
	
	action CustomAction next {
		bind action FireEvent(MediacapturedEvent) on MediaCapturingView.Next.onClick
	}
	
	processChain MediaProcessChain {
	step MediaCapturing:
		view MediaCapturingView
	}
}

WorkflowElement SubmitComplaint {
	defaultProcessChain ComplaintProcessChain
	onInit {
		init
	}
	
	action CustomAction init {
		bind action next on SubmitComplaintView.submitComplaint.onClick
		//bind action FireEvent(SubmitEvent) on SubmitComplaintView.submitComplaint.onClick
		//variant for implementation without process chains:
		//call GotoView (SubmitComplaintView)
	}
	
	action CustomAction next {
		call FireEvent(SubmitEvent)
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation(save :ComplaintProvider)
		call DisplayMessage ("yeah, it worked!")
	}
	
	processChain ComplaintProcessChain {
		step SubmitComplaint:
			view SubmitComplaintView
	}
}

WorkflowElement ReviewComplaint {
	defaultProcessChain ReviewProcessChain
	onInit {
		init
	}
	
	action CustomAction init {
		map ViewComplaint.AddressData.streetLbl4 to :AddressProvider.myStreet
		map ViewComplaint.AddressData.streetNoLbl4 to :AddressProvider.myStreetNo
		map ViewComplaint.AddressData.zipLbl4 to :AddressProvider.myPostalCode
		map ViewComplaint.AddressData.cityLbl4 to :AddressProvider.myCity
		map ViewComplaint.AddressData.countryLbl4 to :AddressProvider.myCountry
		map ViewComplaint.AddressData.latitudeValueLbl4 to :AddressProvider.myLatitude
		map ViewComplaint.AddressData.longitudeValueLbl4 to :AddressProvider.myLongitude
		
		map UpdateComplaint.Feedback to :ComplaintProvider.feedback
		map UpdateComplaint.Status to :ComplaintProvider.status
	}
	
	action CustomAction next{
		bind action GoOn on UpdateComplaint.SendFeedback.onClick
	}
	
	action CustomAction GoOn{
		if(ViewComplaint.addFeedback equals false){
			call FireEvent(ReviewEvent)
		}
	}
	
	processChain ReviewProcessChain {
		step ViewComplaint:
			view ViewComplaint
			proceed {
				on ViewComplaint.Next4.onClick given ViewComplaint.addFeedback equals true
			}
		step UpdateComplaint:
			view UpdateComplaint
	}
}

WorkflowElement ReceiveFeedback {
	defaultProcessChain receiveChain
	onInit{
		init
	}
	
	action CustomAction init{
		map ViewFeedback.AddressData.streetLbl5 to :AddressProvider.myStreet
		map ViewFeedback.AddressData.streetNoLbl5 to :AddressProvider.myStreetNo
		map ViewFeedback.AddressData.zipLbl5 to :AddressProvider.myPostalCode
		map ViewFeedback.AddressData.cityLbl5 to :AddressProvider.myCity
		map ViewFeedback.AddressData.countryLbl5 to :AddressProvider.myCountry
		map ViewFeedback.AddressData.latitudeValueLbl5 to :AddressProvider.myLatitude
		map ViewFeedback.AddressData.longitudeValueLbl5 to :AddressProvider.myLongitude
		
		map ViewFeedback.Feedback to :ComplaintProvider.feedback
		
		bind action FireEvent(ReviewEvent) on ViewFeedback.close.onClick
	}
	
	processChain receiveChain {
	step ViewFeedback:
		view ViewFeedback
	}
}


//}
//
//
//WorkflowElement ProcessMessage {
//	onInit {
//		map ProcessMessageView.ProceesmyStreetView.myStreetLbl to ComplaintProvider.Location.myStreet
//		map ProcessMessageView.ProcessmyStreetView.myStreetNoLbl to ComplaintProvider.Location.myStreetNo
//		map ProcessMessageView.ProcessmyCityView.zipLbl to ComplaintProvider.Location.myPostalCode
//		map ProcessMessageView.ProcessmyCityView.myCityLbl to ComplaintProvider.Location.myCity
//		map ProcessMessageView.myCountryLbl to ComplaintProvider.Location.myCountry
//		map ProcessMessageView.ProcessLaloView.myLatitudeLbl to ComplaintProvider.Location.myLatitude
//		map ProcessMessageView.ProcessLaloView.myLongitudeLbl to ComplaintProvider.Location.myLongitude
//		map ProcessMessageView.UploadImg to ComplaintProvider.picture
//		map ProcessMessageView.DescriptionTxt to ComplaintProvider.descriptions
//		map ProcessMessageView.FeedbackTxt to ComplaintProvider.feedback
//		map ProcessMessageView.complaintStatusDropdown to ComplaintProvider.status
//		display ProcessMessageView
//	}
//	ProcessMessageView.NavigationBar.next {
//			
//		call DataAction(save ComplaintProvider)
//		backToStartScreen
//		fire UpdateStatusEvent
//
//	}
//}