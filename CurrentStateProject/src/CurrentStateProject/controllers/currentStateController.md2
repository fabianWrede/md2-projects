package CurrentStateProject.controllers

main {
	appVersion "1.0"
	modelVersion "1.0"
	workflowManager WorkflowBackendConnection
	defaultConnection CitizenAppRemoteConnection
}
remoteConnection WorkflowBackendConnection{
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection CitizenAppRemoteConnection {
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection AdministrativeAppRemoteConnection{
	uri "http://...."
	user "adminapp"
	password "Qwertz123"
	key "5678"
}

contentProvider Complaint ComplaintProvider {
	providerType CitizenAppRemoteConnection
}

contentProvider Address AddressProvider {
	providerType CitizenAppRemoteConnection
}

WorkflowElement LocationDetection{
	defaultProcessChain LocationProcessChain
	onInit {
		init,
		buttonInit
	}
	
	action CustomAction init{
		map LocationDetectionView.AddressData.streetValue to :AddressProvider.myStreet
		map LocationDetectionView.AddressData.streetNoValue to :AddressProvider.myStreetNo
		map LocationDetectionView.AddressData.cityValue to :AddressProvider.myCity
		map LocationDetectionView.AddressData.countryValue to :AddressProvider.myCountry
		map LocationDetectionView.AddressData.zipValue to :AddressProvider.myPostalCode
		map LocationDetectionView.AddressData.latitudeValue to :AddressProvider.myLatitude
		map LocationDetectionView.AddressData.longitudeValue to :AddressProvider.myLongitude
		map LocationVerifyView.AddressView.streetValue to :AddressProvider.myStreet
		map LocationVerifyView.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map LocationVerifyView.AddressView.cityValue to :AddressProvider.myCity
		map LocationVerifyView.AddressView.zipValue to :AddressProvider.myPostalCode
		map LocationVerifyView.AddressView.countryValue to :AddressProvider.myCountry
		map LocationVerifyView.LatLoView.latitudeValue to :AddressProvider.myLatitude
		map LocationVerifyView.LatLoView.longitudeValue to :AddressProvider.myLongitude
	}
	
	
	 
	action CustomAction buttonInit{
		
		bind action FireEvent(LocationEvent) on LocationVerifyView.Buttons.Next2.onClick
		bind action FireEvent(WithoutPhotoEvent) on LocationVerifyView.Buttons.SkipUpload.onClick
		bind action GoOn on LocationDetectionView.Navbar.Next.onClick
		
		 
	}
	
	
	action CustomAction GoOn{
		if (not LocationDetectionView.AddressData.cityValue equals "Münster"){
			call DisplayMessage("Only complaints from Münster are accepted!")
		}
	}
	
	action CustomAction saveComplaint{
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation (save :ComplaintProvider)
	}
	
	processChain LocationProcessChain{
		step LocationDetection: 
			view LocationDetectionView
			proceed {on LocationDetectionView.Navbar.Next.onClick
				given {(LocationDetectionView.AddressData.cityValue equals "Münster")} 
				then saveComplaint}

		step LocationVerify:
			view LocationVerifyView
			reverse on LocationVerifyView.Buttons.Previous.onClick
	}
}


WorkflowElement Mediacapturing {
	defaultProcessChain MediaProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
		
	}
	
	action CustomAction next {
		bind action FireEvent(MediacapturedEvent) on MediaCapturingView.navbar.Next.onClick
	}
	
	processChain MediaProcessChain {
	step MediaCapturing:
		view MediaCapturingView
	}
}

WorkflowElement SubmitComplaint {
	defaultProcessChain ComplaintProcessChain
	onInit {
		init
	}
	
	action CustomAction init {
		map SubmitComplaintView.AddressView.streetValue to :AddressProvider.myStreet
		
		map SubmitComplaintView.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map SubmitComplaintView.AddressView.cityValue to :AddressProvider.myCity
		map SubmitComplaintView.AddressView.countryValue to :AddressProvider.myCountry
		map SubmitComplaintView.LatLoView.latitudeValue to :AddressProvider.myLatitude
		map SubmitComplaintView.LatLoView.longitudeValue to :AddressProvider.myLongitude


		
		bind action next on SubmitComplaintView.submitComplaint.onClick
		//bind action FireEvent(SubmitEvent) on SubmitComplaintView.submitComplaint.onClick
		//variant for implementation without process chains:
		//call GotoView (SubmitComplaintView)
	}
	
	action CustomAction next {
		call FireEvent(SubmitEvent)
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation(save :ComplaintProvider)
		call DisplayMessage ("Complaint submitted!")
	}
	
	processChain ComplaintProcessChain {
		step SubmitComplaint:
			view SubmitComplaintView
	}
}

WorkflowElement ReviewComplaint {
	defaultProcessChain ReviewProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init {
		map ViewComplaint.AddressView.streetValue to :AddressProvider.myStreet
		map ViewComplaint.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map ViewComplaint.AddressView.zipValue to :AddressProvider.myPostalCode
		map ViewComplaint.AddressView.cityValue to :AddressProvider.myCity
		map ViewComplaint.AddressView.countryValue to :AddressProvider.myCountry
		map ViewComplaint.AddressView.latitudeValue to :AddressProvider.myLatitude
		map ViewComplaint.AddressView.longitudeValue to :AddressProvider.myLongitude
		
		map UpdateComplaint.feedbackView.feedback to :ComplaintProvider.feedback
		map UpdateComplaint.feedbackView.status to :ComplaintProvider.status
		
		bind action sendFeedback on UpdateComplaint.SendFeedback.onClick
	}
	
	action CustomAction sendFeedback{
		//set :ComplaintProvider.feedback = UpdateComplaint.Feedback
		call ContentProviderOperation(save :ComplaintProvider)
		call DisplayMessage ("Changes saved!")
		call FireEvent(ReviewEvent)
	}
	
	action CustomAction next{
		bind action GoOn on ViewComplaint.Next4.onClick
	}
	
	action CustomAction GoOn{
		if(ViewComplaint.AddressView.addFeedback equals false){
			call FireEvent(ReviewEvent)
		}
	}
	
	
	processChain ReviewProcessChain {
		step ViewComplaint:
			view ViewComplaint
			proceed {
				on ViewComplaint.Next4.onClick given ViewComplaint.AddressView.addFeedback equals true
			}
		step UpdateComplaint:
			view UpdateComplaint
	}
}

WorkflowElement ReceiveFeedback {
	defaultProcessChain receiveChain
	onInit{
		init
	}
	
	action CustomAction init{
		map ViewFeedback.AddressData.streetValue to :AddressProvider.myStreet
		map ViewFeedback.AddressData.streetNoValue to :AddressProvider.myStreetNo
		map ViewFeedback.AddressData.zipValue to :AddressProvider.myPostalCode
		map ViewFeedback.AddressData.cityValue to :AddressProvider.myCity
		map ViewFeedback.AddressData.countryValue to :AddressProvider.myCountry
		map ViewFeedback.AddressData.latitudeValue to :AddressProvider.myLatitude
		map ViewFeedback.AddressData.longitudeValue to :AddressProvider.myLongitude
		
		map ViewFeedback.Feedback to :ComplaintProvider.feedback
		
		bind action FireEvent(EndOfProcessEvent) on ViewFeedback.close.onClick
	}
	
	processChain receiveChain {
	step ViewFeedback:
		view ViewFeedback
	}
}


//}
//
//
//WorkflowElement ProcessMessage {
//	onInit {
//		map ProcessMessageView.ProceesmyStreetView.myStreetLbl to ComplaintProvider.Location.myStreet
//		map ProcessMessageView.ProcessmyStreetView.myStreetNoLbl to ComplaintProvider.Location.myStreetNo
//		map ProcessMessageView.ProcessmyCityView.zipLbl to ComplaintProvider.Location.myPostalCode
//		map ProcessMessageView.ProcessmyCityView.myCityLbl to ComplaintProvider.Location.myCity
//		map ProcessMessageView.myCountryLbl to ComplaintProvider.Location.myCountry
//		map ProcessMessageView.ProcessLaloView.myLatitudeLbl to ComplaintProvider.Location.myLatitude
//		map ProcessMessageView.ProcessLaloView.myLongitudeLbl to ComplaintProvider.Location.myLongitude
//		map ProcessMessageView.UploadImg to ComplaintProvider.picture
//		map ProcessMessageView.DescriptionTxt to ComplaintProvider.descriptions
//		map ProcessMessageView.FeedbackTxt to ComplaintProvider.feedback
//		map ProcessMessageView.complaintStatusDropdown to ComplaintProvider.status
//		display ProcessMessageView
//	}
//	ProcessMessageView.NavigationBar.next {
//			
//		call DataAction(save ComplaintProvider)
//		backToStartScreen
//		fire UpdateStatusEvent
//
//	}
//}