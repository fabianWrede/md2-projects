package CurrentStateProject.controllers

main {
	appVersion "1.0"
	modelVersion "1.0"
	defaultConnection CitizenAppRemoteConnection
}

remoteConnection CitizenAppRemoteConnection {
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection AdministrativeAppRemoteConnection{
	uri "http://...."
	user "adminapp"
	password "Qwertz123"
	key "5678"
}

contentProvider Complaint ComplaintProvider {
	providerType CitizenAppRemoteConnection
}

contentProvider Address AddressProvider {
	providerType CitizenAppRemoteConnection
}



WorkflowElement LocationDetection{
	defaultProcessChain LocationProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
		map LocationDetectionView.streetLbl to :AddressProvider.myStreet
		map LocationDetectionView.streetNoLbl to :AddressProvider.myStreetNo
		map LocationDetectionView.cityLbl to :AddressProvider.myCity
		map LocationDetectionView.countryLbl to :AddressProvider.myCountry
		map LocationVerifyView.StreetView.streetLbl2 to :AddressProvider.myStreet
		map LocationVerifyView.StreetView.streetNoLbl2 to :AddressProvider.myStreetNo
		map LocationVerifyView.CityView.cityLbl2 to :AddressProvider.myCity
		map LocationVerifyView.countryLbl2 to :AddressProvider.myCountry
		
		//variant for implementation without process chains:
		//call GotoView (LocationDetectionView)
	}
	
	action CustomAction next{
		bind action FireEvent(LocationEvent) on LocationVerifyView.Next2.onClick
	}
	action CustomAction saveComplaint{
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation (save :ComplaintProvider)
	}
	
	processChain LocationProcessChain{
		step LocationDetection: 
			view LocationDetectionView
			proceed {on LocationDetectionView.Next.onClick
			then saveComplaint}

		step LocationVerify:
			view LocationVerifyView
			reverse on LocationVerifyView.Previous.onClick
	}
}


WorkflowElement Mediacapturing {
	defaultProcessChain MediaProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
			//variant for implementation without process chains:
			//call GotoView (MediaCapturingView)
		}
	
	action CustomAction next {
		bind action FireEvent(MediacapturedEvent) on MediaCapturingView.Next.onClick
	}
	
	processChain MediaProcessChain {
	step MediaCapturing:
		view MediaCapturingView
	}
}

WorkflowElement SubmitComplaint {
	defaultProcessChain ComplaintProcessChain
	onInit {
		init
	}
	
	action CustomAction init {
		//variant for implementation without process chains:
		//call GotoView (SubmitComplaintView)
	}
	
	action CustomAction next {
		bind action FireEvent(SubmitEvent) on SubmitComplaintView.submitComplaint.onClick
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation(save :ComplaintProvider)
		call DisplayMessage ("yeah, it worked!")
		//backToStartScreen
	}
	
	processChain ComplaintProcessChain {
		step SubmitComplaint:
			view SubmitComplaintView
	}
}

//}
//
//
//WorkflowElement ProcessMessage {
//	onInit {
//		map ProcessMessageView.ProceesmyStreetView.myStreetLbl to ComplaintProvider.Location.myStreet
//		map ProcessMessageView.ProcessmyStreetView.myStreetNoLbl to ComplaintProvider.Location.myStreetNo
//		map ProcessMessageView.ProcessmyCityView.zipLbl to ComplaintProvider.Location.myPostalCode
//		map ProcessMessageView.ProcessmyCityView.myCityLbl to ComplaintProvider.Location.myCity
//		map ProcessMessageView.myCountryLbl to ComplaintProvider.Location.myCountry
//		map ProcessMessageView.ProcessLaloView.myLatitudeLbl to ComplaintProvider.Location.myLatitude
//		map ProcessMessageView.ProcessLaloView.myLongitudeLbl to ComplaintProvider.Location.myLongitude
//		map ProcessMessageView.UploadImg to ComplaintProvider.picture
//		map ProcessMessageView.DescriptionTxt to ComplaintProvider.descriptions
//		map ProcessMessageView.FeedbackTxt to ComplaintProvider.feedback
//		map ProcessMessageView.complaintStatusDropdown to ComplaintProvider.status
//		display ProcessMessageView
//	}
//	ProcessMessageView.NavigationBar.next {
//			
//		call DataAction(save ComplaintProvider)
//		backToStartScreen
//		fire UpdateStatusEvent
//
//	}
//}